name: CMake

on:
  push:
    branches: [ master, feature-* ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform-agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

      strategy:
        matrix:
          os: [ubuntu-20.04, macos-11]

    steps:

    - name: Prepare Cache GoogleTest ‚≠êÔ∏è
      # create or load cache
      id: cache-googletest
      uses: actions/cache@v2
      with:
        path: /tmp/googletest
        key: ${{ runner.os }}-googletest

    - name: Prepare Googletest ‚≠êÔ∏è
      # build gtest
      working-directory: /tmp
      if: steps.cache-googletest.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch release-1.6.0 https://github.com/google/googletest.git
        cd googletest && mkdir build && cd build && cmake .. && make

    - name: Install Googletest ‚≠êÔ∏è
      # install gtest
      working-directory: /tmp
      run: |
        cd googletest
        sudo cp -a include/gtest /usr/include
        sudo cp -a build/*.a /usr/lib
        rm -rf googletest*

    - name: Cache Protobuf ‚≠êÔ∏è
      # create or load cache
      id: cache-protobuf
      uses: actions/cache@v2
      with:
        path: /tmp/protobuf
        key: ${{ runner.os }}-protobuf

    - name: Prepare Protobuf ‚≠êÔ∏è
      # install protobuf
      working-directory: /tmp
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch v3.19.1 https://github.com/google/protobuf.git
        cd protobuf && git submodule update --init --recursive && ./autogen.sh
        ./configure && make && make check

    - name: Install Protobuf ‚≠êÔ∏è
      # install cached protobuf
      working-directory: /tmp
      run: |
        cd protobuf
        sudo make install
        sudo ldconfig

    - name: Checkout üõéÔ∏è
      # get repo
      uses: actions/checkout@v2

    - name: Configure CMake üõ†
      # configure CMake project
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTING=ON -DBUILD_LIBRARY=ON -DBUILD_APP=ON -DBUILD_PROTOBUF_EXAMPLES=ON -DBUILD_REPORT_EXAMPLES=OFF

    - name: Build üë∑
      # build target
      run: cmake --build ./build --config ${{env.BUILD_TYPE}}

    - name: Install üí•
      # install target
      run: sudo cmake --build ./build --config ${{env.BUILD_TYPE}} --target install

    - name: Module Tests ‚úÖ
      # run module tests
      run: cmake --build ./build --target test

    - name: Integration Test ‚úÖ
      # build app to check integration
      working-directory: ./test/application
      run: |
        cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build ./build --config ${{env.BUILD_TYPE}}
        cd build/src && chmod +x app && ./app
